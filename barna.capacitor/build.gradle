apply plugin: 'groovy'

def outputName = "flux-capacitor-${version}"
ext.testdata_artifactoryUrl = "http://sammeth.net/artifactory"
ext.testdata_repository = "repo"
ext.testdata_artifact = "barna/test_data-1.0.zip"
ext.testdata_targetDirectory = project(":barna.capacitor").projectDir

// add integration tests to source sets
sourceSets{
    integrationTest{
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output + test.output
        }
        groovy {
            compileClasspath += main.output
            runtimeClasspath += main.output + test.output
        }

    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}


dependencies{
    compile project(':barna.commons')
    compile project(':barna.model')
    compile project(':barna.io')
    compile project(':barna.lpsolver')
    compile 'jfree:jfreechart:1.0.13' 
    compile 'jfree:jcommon:1.0.15'
    compile 'com.google.code.gson:gson:2.1'
    compile 'org.kamranzafar:jtar:2.0.1'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '1.8.4'
    groovy group: 'org.codehaus.groovy', name: 'groovy-all', version: '1.8.4'
}

task integrationTest(type: Test, dependsOn: "distDir") {
    description = "Run integration tests"
    jvmArgs '-Xms128m', '-Xmx1G'
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
        ignoreFailures = true
    }
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath + files(sourceSets.test.output.resourcesDir)
    systemProperties["dist.exe"] = "${distsDir}/${outputName}/bin/flux-capacitor"
    boolean isWindows = false
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        isWindows = true
    }
    if (isWindows) {
        systemProperties["dist.exe"] = systemProperties["dist.exe"] + ".bat"
    }
    // set url properties for test data
    systemProperties["testdata.artifactory"] = testdata_artifactoryUrl
    systemProperties["testdata.repository"] = testdata_repository
    systemProperties["testdata.artifact"] = testdata_artifact
    systemProperties["testdata.target"] = testdata_targetDirectory
}

ext.distSpec = copySpec {
    from(project.rootDir){
        include 'LICENSE'
        include 'LGPL_LICENSE.txt'
        include 'APACHE_LICENSE.txt'
    }
    from('src/main/distribution/'){
        include 'README.txt'
    }
    into('bin') {
        from("${project.rootDir}/barna.distribution/src/main/dist/bin")
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens:
            [
                "flux.tool":'capacitor',
                "flux.app":project.name
            ]
        )

        rename 'flux-template.sh',  'flux-capacitor'
        rename 'flux-template.bat', 'flux-capacitor.bat'
        fileMode = 0755
    }    
    into('lib') {
        from(jar.outputs.files)
        from(configurations.runtime)        
    }
}

task distDir(type: Copy, dependsOn: ['writeIntegrationTestProperties']){
    description = "Prepare a directory for distribution"
    into "${distsDir}/${outputName}"
    with distSpec
}


task distTar(type: Tar, dependsOn: ['writeBuildProperties']) {
    description = "Tars the binary distribution."
    baseName "flux-capacitor"
    into "${outputName}"
    with distSpec
    compression = Compression.GZIP
}

task distZip(type: Zip) {
    description = "Zip the binary distribution."
    baseName "flux-capacitor"
    into "${outputName}"
    with distSpec
}



/**
 * Create aggregated javaDoc from all subprojects
 */
task aggregatedJavadoc(type: Javadoc){
    description = "Build the aggregated JavaDocs for all capacitor modules"
    source = [project(":barna.model"), project(":barna.io"), project(":barna.commons"),project(":barna.capacitor"),project(":barna.lpsolver") ].collectAll{p-> p.sourceSets.main.java}
    destinationDir = file("${buildDir}/docs/flux-capacitor-${version}")
    configure(options) {
        windowTitle = 'Flux-Capacitor API Documentation'
        docTitle = "Flux-Capacitor JavaDoc (${project(':barna.capacitor').version})"
        links = [ 'http://download.oracle.com/javase/6/docs/api/',
                'http://download.oracle.com/javaee/6/api/' ]
    }
}

task zipJavadoc(type: Zip, dependsOn: aggregatedJavadoc ){
    description = "Zip the aggregated javadoc"
    classifier = "javadoc"
    baseName = "flux-capacitor"
    from("${buildDir}/docs/flux-capacitor-${version}"){
        if(version =~ /.*SNAPSHOT.*/){
            into "flux-capacitor-DEVEL"
        }else{
            into "flux-capacitor-${version}"
        }
    }
}

task dist(dependsOn: ['distTar', 'distZip'])

/**
 * Write a properties file for integration tests
 */
task writeIntegrationTestProperties(){
    ext.bp = file("${sourceSets.test.output.resourcesDir.absolutePath}/integration-build.properties")
    outputs.file file(bp)
    ext.props = [:]
    props["dist.exe"] = "${distsDir}/${outputName}/bin/flux-capacitor"
    boolean isWindows = false
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        isWindows = true
    }
    if (isWindows) {
        props["dist.exe"] = props["dist.exe"] + ".bat"
    }
    inputs.properties(props)

    doLast{
        if(!bp.exists()){
            bp.getParentFile().mkdirs();
            bp.createNewFile();
        }else{
            // delete old
            bp.delete()
            bp.createNewFile();
        }
        props.each{k,v->
            bp.append("${k}=${v}\n")
        }
        // hardcoded fix to prepare for IDEA defualt paths
        def ideaDir = project(":").file("out/test/barna.capacitor/")
        if(ideaDir.exists()){
            copy{
                from bp.parentFile.absolutePath
                into ideaDir.absolutePath
                include 'integration-build.properties'
            }
        }

    }
}

artifacts{
    archives distTar 
}

idea{
    module {
        //if for some reason you want to add an extra sourceDirs
        testSourceDirs += file('src/integrationTest/groovy')
        testSourceDirs += file('src/integrationTest/java')
    }
}

