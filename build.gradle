apply plugin: 'base'
apply plugin: 'idea'

ext.nightly=false
ext.timestamp=new Date().format("yyyyMMddHHmmss")

if(System.properties['nightly']){
    ext.nightly=true
}

/**
 * Library version
 *
 * This is the  global flux suite version used to identify
 * library/jar versions
 */
version = "1.10"

/**
 * Versions for applications
 */
ext.appVersions = [
    "barna.astalavista":"1.0-SNAPSHOT",
    "barna.simulator":"1.0",
    "barna.capacitor":"1.0.1-SNAPSHOT",
    "barna.tools":"1.0-SNAPSHOT"
]
ext.appNames = [
    "barna.astalavista":"Astalavista",
    "barna.simulator":"Flux-Simulator",
    "barna.capacitor":"Flux-Capacitor",
    "barna.tools":"Flux-Tools"
]

if(nightly){
    version=version.replaceAll("SNAPSHOT", ext.timestamp)
}


// make sure version defined here are applied to subprojects
subprojects.each{p->
    def av = project(":").appVersions[p.name]
    if(av && nightly) av = av.replaceAll("SNAPSHOT", ext.timestamp)
    p.version = av ? "${av}": "${version}"
}

// collect build info and set it in subprojects
apply from : "${rootDir}/gradle/buildinfo.gradle"

// all projects access the default maven repos
allprojects {
	apply plugin: 'idea'
    
    group "barna"
	repositories {
	    mavenCentral()
		maven {
		    url "http://barnaserver.com/artifactory/repo"
		}
	}
}

// subproject are java projects with maven and artifactory support
// and a set of default dependencies for testing and guice integration
subprojects{
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'artifactory'
    apply plugin: 'eclipse'
    apply plugin: 'project-report'

    sourceCompatibility = 1.6
    dependencies{
		testCompile 'junit:junit-dep:4.10',
					'org.hamcrest:hamcrest-library:1.3.RC2',
					'org.hamcrest:hamcrest-core:1.3.RC2',
					'org.hamcrest:hamcrest-integration:1.3.RC2',
					'org.easymock:easymock:3.1'
	}	
	// load artifactory support for the sub projects
    apply from : "${rootDir}/gradle/artifactory.gradle"
    // add tasks for source/javadoc and test jars and add them as artifacts
    apply from : "${rootDir}/gradle/javaproject.gradle"
    // extend projectReport to print library license info
    apply from : "${rootDir}/gradle/licenses.gradle"

    test{
        jvmArgs '-Xms128m', '-Xmx1G'
    }


}

/**
 * Test all subprojects
 */
task test(){
    dependsOn{
        subprojects.collectAll{sp-> sp.tasks.test}
    }    
}


/**
enable loading the artifactory plugin
*/
buildscript {
    repositories {
        maven { url 'http://repo.jfrog.org/artifactory/gradle-plugins' }
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.0.12')
    }
}


// This is a task that generates the gradlew scripts, allowing users to run gradle without having gradle installed
// on their system.
// This task should be run by "build master" and the resulting output committed to source control.  Its outputs include:
//  1) /gradlew which is the *NIX shell script for executing builds
//  2) /gradlew.bat which is the windows bat script for for executing builds
//  3) /wrapper which is a directory named by the "jarPath" config which contains other needed files.
task wrapper(type: Wrapper) {
    // HHH-6106 - this is needed for IntellJ generation until 1.0-milestone-3 is released.
    gradleVersion = '1.0-rc-1'
}
